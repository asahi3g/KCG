//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ContextsGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class Contexts : Entitas.IContexts {

    public static Contexts sharedInstance {
        get {
            if (_sharedInstance == null) {
                _sharedInstance = new Contexts();
            }

            return _sharedInstance;
        }
        set { _sharedInstance = value; }
    }

    static Contexts _sharedInstance;

    public ActionCoolDownContext actionCoolDown { get; set; }
    public AgentContext agent { get; set; }
    public AIContext aI { get; set; }
    public FloatingTextContext floatingText { get; set; }
    public GameContext game { get; set; }
    public InputContext input { get; set; }
    public InventoryContext inventory { get; set; }
    public ItemInventoryContext itemInventory { get; set; }
    public ItemParticleContext itemParticle { get; set; }
    public MechContext mech { get; set; }
    public NodeContext node { get; set; }
    public ParticleContext particle { get; set; }
    public PodContext pod { get; set; }
    public ProjectileContext projectile { get; set; }
    public VehicleContext vehicle { get; set; }

    public Entitas.IContext[] allContexts { get { return new Entitas.IContext [] { actionCoolDown, agent, aI, floatingText, game, input, inventory, itemInventory, itemParticle, mech, node, particle, pod, projectile, vehicle }; } }

    public Contexts() {
        actionCoolDown = new ActionCoolDownContext();
        agent = new AgentContext();
        aI = new AIContext();
        floatingText = new FloatingTextContext();
        game = new GameContext();
        input = new InputContext();
        inventory = new InventoryContext();
        itemInventory = new ItemInventoryContext();
        itemParticle = new ItemParticleContext();
        mech = new MechContext();
        node = new NodeContext();
        particle = new ParticleContext();
        pod = new PodContext();
        projectile = new ProjectileContext();
        vehicle = new VehicleContext();

        var postConstructors = System.Linq.Enumerable.Where(
            GetType().GetMethods(),
            method => System.Attribute.IsDefined(method, typeof(Entitas.CodeGeneration.Attributes.PostConstructorAttribute))
        );

        foreach (var postConstructor in postConstructors) {
            postConstructor.Invoke(this, null);
        }
    }

    public void Reset() {
        var contexts = allContexts;
        for (int i = 0; i < contexts.Length; i++) {
            contexts[i].Reset();
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.EntityIndexGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class Contexts {

    public const string ActionCoolDownTypeID = "ActionCoolDownTypeID";
    public const string ActionCoolDownAgentID = "ActionCoolDownAgentID";
    public const string AgentID = "AgentID";
    public const string FloatingTextID = "FloatingTextID";
    public const string InventoryID = "InventoryID";
    public const string ItemID = "ItemID";
    public const string ItemInventory = "ItemInventory";
    public const string ItemType = "ItemType";
    public const string MechID = "MechID";
    public const string NodeIDID = "NodeIDID";
    public const string NodeIDTypeID = "NodeIDTypeID";
    public const string NodeOwner = "NodeOwner";
    public const string NodeTool = "NodeTool";
    public const string ParticleEmitterID = "ParticleEmitterID";
    public const string ParticleID = "ParticleID";
    public const string ProjectileID = "ProjectileID";
    public const string VehicleID = "VehicleID";
    public const string VehiclePodID = "VehiclePodID";

    [Entitas.CodeGeneration.Attributes.PostConstructor]
    public void InitializeEntityIndices() {
        actionCoolDown.AddEntityIndex(new Entitas.EntityIndex<ActionCoolDownEntity, Enums.ActionType>(
            ActionCoolDownTypeID,
            actionCoolDown.GetGroup(ActionCoolDownMatcher.ActionCoolDown),
            (e, c) => ((ActionCoolDown.Component)c).TypeID));

        actionCoolDown.AddEntityIndex(new Entitas.EntityIndex<ActionCoolDownEntity, int>(
            ActionCoolDownAgentID,
            actionCoolDown.GetGroup(ActionCoolDownMatcher.ActionCoolDown),
            (e, c) => ((ActionCoolDown.Component)c).AgentID));

        agent.AddEntityIndex(new Entitas.PrimaryEntityIndex<AgentEntity, int>(
            AgentID,
            agent.GetGroup(AgentMatcher.AgentID),
            (e, c) => ((Agent.IDComponent)c).ID));

        floatingText.AddEntityIndex(new Entitas.PrimaryEntityIndex<FloatingTextEntity, int>(
            FloatingTextID,
            floatingText.GetGroup(FloatingTextMatcher.FloatingTextID),
            (e, c) => ((FloatingText.IDComponent)c).ID));

        inventory.AddEntityIndex(new Entitas.PrimaryEntityIndex<InventoryEntity, int>(
            InventoryID,
            inventory.GetGroup(InventoryMatcher.InventoryID),
            (e, c) => ((Inventory.IDComponent)c).ID));

        itemInventory.AddEntityIndex(new Entitas.PrimaryEntityIndex<ItemInventoryEntity, int>(
            ItemID,
            itemInventory.GetGroup(ItemInventoryMatcher.ItemID),
            (e, c) => ((Item.IDComponent)c).ID));
        itemParticle.AddEntityIndex(new Entitas.PrimaryEntityIndex<ItemParticleEntity, int>(
            ItemID,
            itemParticle.GetGroup(ItemParticleMatcher.ItemID),
            (e, c) => ((Item.IDComponent)c).ID));

        itemInventory.AddEntityIndex(new Entitas.EntityIndex<ItemInventoryEntity, int>(
            ItemInventory,
            itemInventory.GetGroup(ItemInventoryMatcher.ItemInventory),
            (e, c) => ((Item.InventoryComponent)c).InventoryID));

        itemInventory.AddEntityIndex(new Entitas.EntityIndex<ItemInventoryEntity, Enums.ItemType>(
            ItemType,
            itemInventory.GetGroup(ItemInventoryMatcher.ItemType),
            (e, c) => ((Item.TypeComponent)c).Type));
        itemParticle.AddEntityIndex(new Entitas.EntityIndex<ItemParticleEntity, Enums.ItemType>(
            ItemType,
            itemParticle.GetGroup(ItemParticleMatcher.ItemType),
            (e, c) => ((Item.TypeComponent)c).Type));

        mech.AddEntityIndex(new Entitas.PrimaryEntityIndex<MechEntity, int>(
            MechID,
            mech.GetGroup(MechMatcher.MechID),
            (e, c) => ((Mech.IDComponent)c).ID));

        node.AddEntityIndex(new Entitas.PrimaryEntityIndex<NodeEntity, int>(
            NodeIDID,
            node.GetGroup(NodeMatcher.NodeID),
            (e, c) => ((Node.IDComponent)c).ID));

        node.AddEntityIndex(new Entitas.EntityIndex<NodeEntity, Enums.ActionType>(
            NodeIDTypeID,
            node.GetGroup(NodeMatcher.NodeID),
            (e, c) => ((Node.IDComponent)c).TypeID));

        node.AddEntityIndex(new Entitas.EntityIndex<NodeEntity, int>(
            NodeOwner,
            node.GetGroup(NodeMatcher.NodeOwner),
            (e, c) => ((Node.OwnerComponent)c).AgentID));

        node.AddEntityIndex(new Entitas.EntityIndex<NodeEntity, int>(
            NodeTool,
            node.GetGroup(NodeMatcher.NodeTool),
            (e, c) => ((Node.ToolComponent)c).ItemID));

        particle.AddEntityIndex(new Entitas.PrimaryEntityIndex<ParticleEntity, int>(
            ParticleEmitterID,
            particle.GetGroup(ParticleMatcher.ParticleEmitterID),
            (e, c) => ((Particle.EmitterIDComponent)c).ID));

        particle.AddEntityIndex(new Entitas.PrimaryEntityIndex<ParticleEntity, long>(
            ParticleID,
            particle.GetGroup(ParticleMatcher.ParticleID),
            (e, c) => ((Particle.IDComponent)c).ID));

        projectile.AddEntityIndex(new Entitas.PrimaryEntityIndex<ProjectileEntity, int>(
            ProjectileID,
            projectile.GetGroup(ProjectileMatcher.ProjectileID),
            (e, c) => ((Projectile.IDComponent)c).ID));

        vehicle.AddEntityIndex(new Entitas.PrimaryEntityIndex<VehicleEntity, int>(
            VehicleID,
            vehicle.GetGroup(VehicleMatcher.VehicleID),
            (e, c) => ((Vehicle.IDComponent)c).ID));

        pod.AddEntityIndex(new Entitas.PrimaryEntityIndex<PodEntity, int>(
            VehiclePodID,
            pod.GetGroup(PodMatcher.VehiclePodID),
            (e, c) => ((Vehicle.Pod.IDComponent)c).ID));
    }
}

public static class ContextsExtensions {

    public static System.Collections.Generic.HashSet<ActionCoolDownEntity> GetEntitiesWithActionCoolDownTypeID(this ActionCoolDownContext context, Enums.ActionType TypeID) {
        return ((Entitas.EntityIndex<ActionCoolDownEntity, Enums.ActionType>)context.GetEntityIndex(Contexts.ActionCoolDownTypeID)).GetEntities(TypeID);
    }

    public static System.Collections.Generic.HashSet<ActionCoolDownEntity> GetEntitiesWithActionCoolDownAgentID(this ActionCoolDownContext context, int AgentID) {
        return ((Entitas.EntityIndex<ActionCoolDownEntity, int>)context.GetEntityIndex(Contexts.ActionCoolDownAgentID)).GetEntities(AgentID);
    }

    public static AgentEntity GetEntityWithAgentID(this AgentContext context, int ID) {
        return ((Entitas.PrimaryEntityIndex<AgentEntity, int>)context.GetEntityIndex(Contexts.AgentID)).GetEntity(ID);
    }

    public static FloatingTextEntity GetEntityWithFloatingTextID(this FloatingTextContext context, int ID) {
        return ((Entitas.PrimaryEntityIndex<FloatingTextEntity, int>)context.GetEntityIndex(Contexts.FloatingTextID)).GetEntity(ID);
    }

    public static InventoryEntity GetEntityWithInventoryID(this InventoryContext context, int ID) {
        return ((Entitas.PrimaryEntityIndex<InventoryEntity, int>)context.GetEntityIndex(Contexts.InventoryID)).GetEntity(ID);
    }

    public static ItemInventoryEntity GetEntityWithItemID(this ItemInventoryContext context, int ID) {
        return ((Entitas.PrimaryEntityIndex<ItemInventoryEntity, int>)context.GetEntityIndex(Contexts.ItemID)).GetEntity(ID);
    }

    public static ItemParticleEntity GetEntityWithItemID(this ItemParticleContext context, int ID) {
        return ((Entitas.PrimaryEntityIndex<ItemParticleEntity, int>)context.GetEntityIndex(Contexts.ItemID)).GetEntity(ID);
    }

    public static System.Collections.Generic.HashSet<ItemInventoryEntity> GetEntitiesWithItemInventory(this ItemInventoryContext context, int InventoryID) {
        return ((Entitas.EntityIndex<ItemInventoryEntity, int>)context.GetEntityIndex(Contexts.ItemInventory)).GetEntities(InventoryID);
    }

    public static System.Collections.Generic.HashSet<ItemInventoryEntity> GetEntitiesWithItemType(this ItemInventoryContext context, Enums.ItemType Type) {
        return ((Entitas.EntityIndex<ItemInventoryEntity, Enums.ItemType>)context.GetEntityIndex(Contexts.ItemType)).GetEntities(Type);
    }

    public static System.Collections.Generic.HashSet<ItemParticleEntity> GetEntitiesWithItemType(this ItemParticleContext context, Enums.ItemType Type) {
        return ((Entitas.EntityIndex<ItemParticleEntity, Enums.ItemType>)context.GetEntityIndex(Contexts.ItemType)).GetEntities(Type);
    }

    public static MechEntity GetEntityWithMechID(this MechContext context, int ID) {
        return ((Entitas.PrimaryEntityIndex<MechEntity, int>)context.GetEntityIndex(Contexts.MechID)).GetEntity(ID);
    }

    public static NodeEntity GetEntityWithNodeIDID(this NodeContext context, int ID) {
        return ((Entitas.PrimaryEntityIndex<NodeEntity, int>)context.GetEntityIndex(Contexts.NodeIDID)).GetEntity(ID);
    }

    public static System.Collections.Generic.HashSet<NodeEntity> GetEntitiesWithNodeIDTypeID(this NodeContext context, Enums.ActionType TypeID) {
        return ((Entitas.EntityIndex<NodeEntity, Enums.ActionType>)context.GetEntityIndex(Contexts.NodeIDTypeID)).GetEntities(TypeID);
    }

    public static System.Collections.Generic.HashSet<NodeEntity> GetEntitiesWithNodeOwner(this NodeContext context, int AgentID) {
        return ((Entitas.EntityIndex<NodeEntity, int>)context.GetEntityIndex(Contexts.NodeOwner)).GetEntities(AgentID);
    }

    public static System.Collections.Generic.HashSet<NodeEntity> GetEntitiesWithNodeTool(this NodeContext context, int ItemID) {
        return ((Entitas.EntityIndex<NodeEntity, int>)context.GetEntityIndex(Contexts.NodeTool)).GetEntities(ItemID);
    }

    public static ParticleEntity GetEntityWithParticleEmitterID(this ParticleContext context, int ID) {
        return ((Entitas.PrimaryEntityIndex<ParticleEntity, int>)context.GetEntityIndex(Contexts.ParticleEmitterID)).GetEntity(ID);
    }

    public static ParticleEntity GetEntityWithParticleID(this ParticleContext context, long ID) {
        return ((Entitas.PrimaryEntityIndex<ParticleEntity, long>)context.GetEntityIndex(Contexts.ParticleID)).GetEntity(ID);
    }

    public static ProjectileEntity GetEntityWithProjectileID(this ProjectileContext context, int ID) {
        return ((Entitas.PrimaryEntityIndex<ProjectileEntity, int>)context.GetEntityIndex(Contexts.ProjectileID)).GetEntity(ID);
    }

    public static VehicleEntity GetEntityWithVehicleID(this VehicleContext context, int ID) {
        return ((Entitas.PrimaryEntityIndex<VehicleEntity, int>)context.GetEntityIndex(Contexts.VehicleID)).GetEntity(ID);
    }

    public static PodEntity GetEntityWithVehiclePodID(this PodContext context, int ID) {
        return ((Entitas.PrimaryEntityIndex<PodEntity, int>)context.GetEntityIndex(Contexts.VehiclePodID)).GetEntity(ID);
    }
}
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.VisualDebugging.CodeGeneration.Plugins.ContextObserverGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class Contexts {

#if (!ENTITAS_DISABLE_VISUAL_DEBUGGING && UNITY_EDITOR)

    [Entitas.CodeGeneration.Attributes.PostConstructor]
    public void InitializeContextObservers() {
        try {
            CreateContextObserver(actionCoolDown);
            CreateContextObserver(agent);
            CreateContextObserver(aI);
            CreateContextObserver(floatingText);
            CreateContextObserver(game);
            CreateContextObserver(input);
            CreateContextObserver(inventory);
            CreateContextObserver(itemInventory);
            CreateContextObserver(itemParticle);
            CreateContextObserver(mech);
            CreateContextObserver(node);
            CreateContextObserver(particle);
            CreateContextObserver(pod);
            CreateContextObserver(projectile);
            CreateContextObserver(vehicle);
        } catch(System.Exception) {
        }
    }

    public void CreateContextObserver(Entitas.IContext context) {
        if (UnityEngine.Application.isPlaying) {
            var observer = new Entitas.VisualDebugging.Unity.ContextObserver(context);
            UnityEngine.Object.DontDestroyOnLoad(observer.gameObject);
        }
    }

#endif
}
